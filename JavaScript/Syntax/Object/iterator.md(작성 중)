# iterable 객체
*반복 가능한(iterable, 이터러블*)객체는 배열을 일반화한 객체다.

`iterable`이라는 개념을 사용하면 어떤 객체에든 `for...of`반복문을 적용할 수 있다.

배열은 대표적인 이터러블이다. 배열 이외에도 다수의 내장 객체가 반복 가능하다.
문자열 역시 이터러블의 예이다.

**배열이 아닌 객체가 있는데**, 이 객체가 어떤 것들의 컬렉션(목록, 집합 등)을 나타내는 경우, `for..of` 문법을 적용할 수만 있다면 컬렉션을 순회하는데 유용하다.

## Symbol.iterator
직접 이터러블 객체를 만들어 이터러블이라는 개념을 이해해보자.
`for...of`를 적용하기에 적합해 보이는 **배열이 아닌 객체**를 만들자.
```js
let range = {
  from: 1,
  to: 5
};

// 아래와 같이 for..of가 동작할 수 있도록 하는 게 목표입니다.
// for(let num of range) ... num=1,2,3,4,5
```
`range`를 이터러블로 만드려면(`for...of`가 동작하도록 하려면) 객체에 `Symbol.iterator`라는 메서드를 추가해주면 된다.

`Symbol.iterator`가 추가된 객체는 아래와 같이 동작한다.

1. `for...of`가 시작되면 `for...of`는 `Symbol.iterator`를 호출한다.
   1. `Symbol.iterator`는 **반드시 이터레이터 객체를 반환해야 한다.**
2. 이후 `for...of`는 반환된 이터레이터 객체만을 대상으로 동작한다.
3. `...for...of`에 다음 값이 필요하면, `for...of`는 이터레이터의 `next()`를 호출한다.
4. `next()`의 반환 값은 `{done: Boolean, value: any}`와 같은 형태이며, `done == true`는 반복이 종료되었음을 의미한다.
   1. 반대로 `done == false`일 땐 value에 값이 저장된다.
